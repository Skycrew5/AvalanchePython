
# –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –≤ 3D-–º–∏—Ä–µ

L = ( "‚¨õüü´üü´üü´üü´üü´üü´üü´üü´‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ\n"  # 16
      "‚¨õüü´‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õüü´‚¨õ‚¨õ‚¨õ‚¨õ‚¨õüü´üü´üü´üü´üü´üü´üü´üü´‚¨õ‚¨õ‚¨õ‚¨õ\n"  # 15
      "‚¨õüü´üü´üü´‚¨õ‚¨õüü´üü´üü´üü´‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õüü´‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ\n"  # 14
      "‚¨õüü´üü´üü´üü´üü´üü´üü´üü´üü´üü´‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õüü´‚¨õ‚¨õ‚¨õüü´‚¨õ‚¨õ‚¨õ\n"  # 13
      "‚¨õ‚¨õüü´üü´üü´üü´üü´üü´‚¨õüü´üü´‚¨õüü´üü´‚¨õ‚¨õ‚¨õüü´üü´üü´üü´‚¨õüü´‚¨õ‚¨õ‚¨õ\n"  # 12
      "‚¨õ‚¨õüü´üü´‚¨õ‚¨õüü´üü´‚¨õüü´üü´üü´üü´üü´üü´‚¨õ‚¨õüü´üü´‚¨õ‚¨õ‚¨õüü´‚¨õ‚¨õ‚¨õ\n"  # 11
      "‚¨õüü´üü´üü´‚¨õ‚¨õ‚¨õüü´üü´üü´‚¨õ‚¨õ‚¨õ‚¨õüü´üü´üü´üü´üü´‚¨õ‚¨õ‚¨õüü´‚¨õ‚¨õ‚¨õ\n"  # 10
      "‚¨õüü´üü´üü´üü´üü´üü´üü´üü´üü´üü´üü´üü´üü´üü´üü´üü´üü´üü´üü´‚¨õ‚¨õüü´‚¨õ‚¨õ‚¨õ\n"  #  9
      "‚¨õüü´üü´üü´üü´üü´üü´üü´üü´üü´üü´üü´üü´üü´üü´üü´üü´üü´üü´üü´üü´üü´üü´‚¨õ‚¨õ‚¨õ\n"  #  8
      "‚¨õ‚¨õüü´üü´üü´üü´üü´üü´üü´üü´üü´üü´üü´üü´üü´üü´üü´üü´üü´üü´üü´üü´üü´‚¨õ‚¨õ‚¨õ\n"  #  7
      "‚¨õ‚¨õüü´üü´üü´üü´üü´üü´‚¨õüü´üü´üü´üü´üü´üü´‚¨õüü´üü´üü´‚¨õ‚¨õüü´üü´‚¨õ‚¨õ‚¨õ\n"  #  6
      "‚¨õ‚¨õ‚¨õüü´üü´üü´üü´üü´üü´üü´üü´üü´üü´‚¨õ‚¨õ‚¨õüü´üü´üü´‚¨õ‚¨õüü´üü´üü´‚¨õ‚¨õ\n"  #  5
      "‚¨õ‚¨õ‚¨õüü´üü´üü´üü´üü´üü´üü´üü´üü´‚¨õ‚¨õ‚¨õ‚¨õüü´üü´üü´üü´üü´üü´üü´üü´‚¨õ‚¨õ\n"  #  4
      "‚¨õ‚¨õ‚¨õ‚¨õüü´üü´‚¨õ‚¨õüü´üü´üü´‚¨õ‚¨õüü´üü´‚¨õ‚¨õüü´üü´üü´üü´üü´üü´üü´üü´‚¨õ\n"  #  3
      "‚¨õüü´üü´üü´üü´üü´‚¨õ‚¨õüü´üü´üü´‚¨õ‚¨õüü´üü´‚¨õ‚¨õüü´üü´üü´üü´üü´‚¨õüü´üü´‚¨õ\n"  #  2
      "‚¨õüü´üü´üü´üü´üü´üü´üü´üü´üü´üü´üü´‚¨õ‚¨õ‚¨õ‚¨õ‚¨õüü´üü´‚¨õ‚¨õ‚¨õ‚¨õ‚¨õüü´üü´\n"  #  1
      "üü´üü´‚¨õüü´üü´üü´üü´üü´üü´üü´üü´üü´üü´üü´üü´üü´üü´üü´üü´üü´üü´üü´üü´üü´üü´üü´" )  #  0

layers = L.split("\n")  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞—Ä—Ç—É –≤ —á–∏—Å–ª–æ–≤—É—é –º–∞—Ç—Ä–∏—Ü—É
LAND_3D, COLO_3D, glubi = [], [], 20  # Y (–≤—ã—Å–æ—Ç–∞), X (—à–∏—Ä–∏–Ω–∞), Z (–≥–ª—É–±–∏–Ω–∞)

for row in reversed(layers):
    sloi, sloi_Colo, co, l = [], [], [], []
    for cell in row:
        glu, gl_Colo = [], []
# –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è 3-–¥ –≤—ã—Ç—è–≥–∏–≤–∞–µ–º –ø–∏–∫—Å–µ–ª–∏ –≤ –≥–ª—É–±–∏–Ω—É (–ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥–Ω—é—é —Å—Ç–µ–Ω–∫—É –≤–≥–ª—É–±—å)
        for i in range(glubi): 
            glu.append([0,-1][cell == "‚¨õ"])
            gl_Colo.append(cell)
        sloi.append(glu)
        sloi_Colo.append(gl_Colo)
        
    LAND_3D.append(sloi)
    COLO_3D.append(sloi_Colo)

 
width = len(layers[0]);  height = len(layers)
print(f"–®–∏—Ä–∏–Ω–∞ –º–∏—Ä–∞: {width}  –≤—ã—Å–æ—Ç–∞ –º–∏—Ä–∞: {height}  –≥–ª—É–±–∏–Ω–∞ –º–∏—Ä–∞: {glubi}")

# ----------------------------------------------------------------------------
# –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –º–∏—Ä–∞

# –í—ã—Ä–µ–∑–∞–µ–º –∫—É—Å–æ–∫, –ø—Ä–∏–Ω–∏–º–∞—è –∫–æ–æ—Ä–¥—ã –Ω–∏–∂–Ω–µ–≥–æ-–ª–µ–≤–æ–≥–æ-–±–ª–∏–∂–Ω–µ–≥–æ –∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ-–ø—Ä–∞–≤–æ–≥–æ-–¥–∞–ª—å–Ω–µ–≥–æ –≤–æ–∫—Å–µ–ª—è
def Virezat(y1, x1, z1, y2, x2, z2):
    for Y in range(y1, y2):
         for X in range(x1, x2):        
             for Z in range(z1, z2): COLO_3D[Y][X][Z] = "‚¨õ"

Virezat(6, 5, 0, 9, 21, 15)
            
# ----------------------------------------------------------------------------
# –í—ã–≤–æ–¥ —Ä–∞–∑–Ω—ã—Ö 2D —Å–µ—á–µ–Ω–∏–π

def Sechenie_X(x):     # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å—Ä–µ–∑ –æ—Ç –∑—Ä–∏—Ç–µ–ª—è –≤ –¥–∞–ª—å (—Ü–≤–µ—Ç–∞)
    # –í—ã–≤–æ–¥–∏–º —Ü–≤–µ—Ç–∞
    for Y in reversed(range(height)):
        print(f"{Y}  {'' if Y > 9 else ' '}" +
              ''.join(f"{cell}" if 1 == 1 else "  " for cell in COLO_3D[Y][x]))

def SechenieUst_X(x):  # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å—Ä–µ–∑ –æ—Ç –∑—Ä–∏—Ç–µ–ª—è –≤ –¥–∞–ª—å (—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏)
    # –í—ã–≤–æ–¥–∏–º —Ü–≤–µ—Ç–∞
    for Y in reversed(range(height)):
        print(f"{Y}  {'' if Y > 9 else ' '}" +
        ' '.join(f"{str(cell)[:6]:^6}" if cell >=0 else "      " for cell in LAND_3D[Y][x]))
     
    print("\n    " +
    ' '.join(f"{int(x):^6}" for x in range(width)) + "\n")    
    
def Sechenie_Z(z):     # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å—Ä–µ–∑ —Å–ª–µ–≤–∞-–Ω–∞–ø—Ä–∞–≤–æ (—Ü–≤–µ—Ç–∞)
    # –í—ã–≤–æ–¥–∏–º —Ü–≤–µ—Ç–∞
    print("\nY‚Üë                      —Å—Ä–µ–∑ –ø–æ Z = "+str(z)+" ")
    #print("Y‚Üì")
    for Y in reversed(range(height)):
        Stroka = f'{str(Y):>2} '
        for X in range(width): Stroka += COLO_3D[Y][X][z]
        if Y == 0: Stroka += "  X‚Üí"
        print(Stroka)

def SechenieUst_Z(z):  # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å—Ä–µ–∑ —Å–ª–µ–≤–∞-–Ω–∞–ø—Ä–∞–≤–æ (—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏)
    # –í—ã–≤–æ–¥–∏–º —Ü–≤–µ—Ç–∞
    print("\n\n                        —Å—Ä–µ–∑ –ø–æ Z = "+str(z)+" (—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å) \n")
    #print("Y‚Üì")
    for Y in reversed(range(height)):
        Stroka = f'{str(Y):>2}  '
        for X in range(width): 
           #if LAND_3D[Y][X][z] < 0: Stroka += "       "
            if COLO_3D[Y][X][z] == "‚¨õ": Stroka += "       "            
            else: Stroka += f'{str(LAND_3D[Y][X][z])[:6]:^6}' + " "
        print(Stroka)
    print("Y‚Üë\n  X‚Üí" +
    ''.join(f"{int(x):^6} " for x in range(width)) + "\n")
    
def Sechenie_Y(y):     # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å—Ä–µ–∑ –æ—Ç –∑—Ä–∏—Ç–µ–ª—è –≤ –¥–∞–ª—å (—Ü–≤–µ—Ç–∞)
    # –í—ã–≤–æ–¥–∏–º —Ü–≤–µ—Ç–∞
    print("\n\nZ‚Üë                      —Å—Ä–µ–∑ –ø–æ Y = "+str(y)+" ")   
    for Z in reversed(range(glubi)):
        Stroka = f'{str(Z):>2} '
        for X in range(width):
            Stroka += COLO_3D[y][X][Z]
        if Z == 0: Stroka += "  X‚Üí"
        print(Stroka)
    
def SechenieUst_Y(y):  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å—Ä–µ–∑ –æ—Ç –∑—Ä–∏—Ç–µ–ª—è –≤ –¥–∞–ª—å (—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏)
    # –í—ã–≤–æ–¥–∏–º —Ü–≤–µ—Ç–∞
    #print("\nY = "+str(y)+":")
    print("\n\n                        —Å—Ä–µ–∑ –ø–æ Y = "+str(y)+" (—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å) \n")    
    for Z in reversed(range(glubi)):
        Stroka = f'{str(Z):>2}  '
        for X in range(width): 
           #if LAND_3D[y][X][Z] < 0: Stroka += "       "
            if COLO_3D[y][X][Z] == "‚¨õ": Stroka += "       "               
            else: Stroka += f'{str(LAND_3D[y][X][Z])[:6]:^6}' + " "        
        print(Stroka)
        
    print("Z‚Üë\n  X‚Üí" +
    ''.join(f"{int(x):^6} " for x in range(width)) + "\n")

def sosedi(Y, X, Z):   # –í—ã–¥–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å–æ—Å–µ–¥–µ–π –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –ø–ª–æ—Å–∫–æ—Å—Ç–∏
    sose = []
    if X > 0        and COLO_3D[Y][X-1][Z] == "üü´": sose.append([X-1, Z])
    if X < width-1  and COLO_3D[Y][X+1][Z] == "üü´": sose.append([X+1, Z])
    if Z > 0        and COLO_3D[Y][X][Z-1] == "üü´": sose.append([X, Z-1])    
    if Z < glubi-1  and COLO_3D[Y][X][Z+1] == "üü´": sose.append([X, Z+1]) 
    return sose

# ----------------------------------------------------------------------------
# –í—ã—á–∏—Å–ª—è–µ–º —É—Å—Ç—Ä–æ–π—á–∏–≤–æ—Å—Ç—å –ø–æ —Å–ª–æ—è–º —Å–Ω–∏–∑—É

for Y in range(height): 
    podpor = []
    
    # –ë–µ—Ä–µ–º —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∏–∑ –Ω–∏–∂–Ω–∏—Ö –±–ª–æ–∫–æ–≤ (–¥–ª—è –ø–æ–¥–ø–µ—Ä—Ç—ã—Ö)
    for X in range(width):
        for Z in range(glubi):
            if COLO_3D[Y][X][Z] == "üü´":
                if Y == 0:
                    COLO_3D[Y][X][Z] = "üü©"
                    LAND_3D[Y][X][Z] = 99.999
                    continue
                    
                if LAND_3D[Y-1][X][Z] > 0: 
                   #LAND_3D[Y][X][Z] = LAND_3D[Y-1][X][Z] * 1
                    LAND_3D[Y][X][Z] = 99
                    COLO_3D[Y][X][Z] = "üü©"
                    podpor.append([X,Z])
                                  
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –±–æ–∫–æ–≤—ã–º –æ—Ç –ø–æ–¥–ø–µ—Ä—Ç—ã—Ö –≤ —ç—Ç–æ–º —Å–ª–æ–µ             
    MaxIter, Iter = 100, 0
    while Iter < MaxIter and len(podpor) > 0:
        Iter += 1
        vremen = []
        for p in  podpor: vremen.append(p) 
        podpor = []
    
        for v in  vremen:   # –ü—Ä–æ—Ö–æ–¥ 1 - —Ä–∞–∑–Ω–æ—Å–∏–º —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å —Å–æ—Å–µ–¥—è–º
            OrX, OrZ = v[0], v[1]        
            for s in sosedi(Y, OrX, OrZ):
                X, Z = s[0], s[1] 
                LAND_3D[Y][X][Z] = Iter
               #LAND_3D[Y][X][Z] += LAND_3D[Y][OrX][OrZ] * 0.2

        for v in  vremen:   # –ü—Ä–æ—Ö–æ–¥ 2 - –ø–æ–º–µ—á–∞–µ–º —Å–æ—Å–µ–¥–µ–π –∏ –∑–∞–Ω–æ—á–∏–º –≤ –º–∞—Å—Å–∏–≤  
            OrX, OrZ = v[0], v[1]        
            for s in  sosedi(Y, OrX, OrZ):
                X, Z = s[0], s[1]
                COLO_3D[Y][X][Z] = "üü®"
                if [X,Z] not in podpor: podpor.append([X,Z])  
   
       #if Iter >= 5: break
   #if Y == 9: break    
 
SechenieUst_Z(10)         
Sechenie_Z(10)


Sechenie_Y(8)
SechenieUst_Y(8)   
    
    
    
    
