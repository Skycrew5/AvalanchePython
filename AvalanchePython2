
# Распределение устойчивостей в одном горизонтальном слое 3D-мира

L = ( "⬛🟫🟫🟫🟫🟫🟫🟫🟫⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛\n"
      "⬛🟫⬛⬛⬛⬛⬛⬛🟫⬛⬛⬛⬛⬛🟫🟫🟫🟫🟫🟫🟫🟫⬛⬛⬛⬛\n"
      "⬛🟫🟫🟫⬛⬛🟫🟩🟩🟩⬛⬛⬛⬛⬛⬛⬛⬛🟫⬛⬛⬛⬛⬛⬛⬛\n"
      "⬛🟫🟫🟫🟫🟫🟫🟫🟫🟩🟫⬛⬛⬛⬛⬛⬛⬛🟫⬛⬛⬛🟫⬛⬛⬛\n"
      "⬛⬛🟫🟫🟫🟫🟫🟫⬛🟩🟫⬛🟫🟫⬛⬛⬛🟫🟫🟫🟫⬛🟫⬛⬛⬛\n"
      "⬛⬛🟫🟫⬛⬛🟫🟫⬛🟩🟫🟫🟫🟫🟫⬛⬛🟫🟫⬛⬛⬛🟫⬛⬛⬛\n"
      "⬛🟫🟫🟫⬛⬛⬛🟫⬛🟩⬛⬛⬛⬛🟫🟫🟫🟫🟫⬛⬛⬛🟫⬛⬛⬛\n"
      "⬛🟫🟫🟫🟫🟫🟫🟫🟫🟩🟫🟫🟫🟫🟫🟫🟫🟫🟫🟫⬛⬛🟫⬛⬛⬛\n"
      "⬛🟫🟫🟫🟫🟫🟫🟫⬛🟩🟫🟫🟫🟫🟩🟫🟫🟫🟫🟫🟫🟫🟫⬛⬛⬛\n"
      "⬛⬛🟫🟫🟫🟫🟫🟫⬛🟩🟫🟫🟫🟩🟫🟩🟫🟫🟫🟫🟫🟫🟫⬛⬛⬛\n"
      "⬛⬛🟫🟫🟫🟫🟫🟫⬛🟩🟫🟫🟫🟫🟩⬛🟫🟫🟫⬛⬛🟫🟫⬛⬛⬛\n"
      "⬛⬛⬛🟫🟫🟫🟫🟫🟫🟩🟫🟫🟫⬛⬛⬛🟫🟫🟫⬛⬛🟩🟫🟫⬛⬛\n"
      "⬛⬛⬛🟫🟫🟫🟫🟫🟫🟩🟫🟫⬛⬛⬛⬛🟫🟫🟫🟫🟫🟩🟫🟫⬛⬛\n"
      "⬛⬛⬛⬛🟫🟫⬛⬛🟫🟩🟫⬛⬛🟫🟫⬛⬛🟫🟫🟫🟫🟫🟫🟫🟫⬛\n"
      "⬛🟫🟫🟫🟫🟫⬛⬛🟫🟩🟫⬛⬛🟫🟫⬛⬛🟫🟫🟫🟫🟫⬛🟫🟫⬛\n"
      "⬛🟫🟫🟫🟫🟫🟩🟩🟩🟩🟩🟫⬛⬛⬛⬛⬛🟫🟫⬛⬛⬛⬛⬛🟫🟫\n"
      "🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟫🟫🟫🟫🟫🟫🟫🟫🟫🟫🟫🟫🟫🟫🟫" )

LAND = []  # Карта устройччивостей
LA   = []  # Карта устройччивостей (временная)
COLO = []  # Цветовая карта (для красивой картинки)

# Преобразуем карту в числовую матрицу
layers = L.split("\n")

# Создаем и заполняем матрицу LAND
YY = 0;  podpor = []
for row in layers:
    XX = 0
    numeric_row, co, numeric_rol = [], [], []
    for cell in row:
        if cell == "⬛":
            usto = -1
            co.append("⬛")
        if cell == "🟩": 
            usto = 99.999
            podpor.append([YY, XX])
            co.append("🟥")
        if cell == "🟫": 
            usto = 0
            co.append("🟩")
        numeric_row.append(usto)
        numeric_rol.append(usto)
        XX += 1
        
    LAND.append(numeric_row)
    LA.append(numeric_rol)
    COLO.append(co)
    YY += 1

width = len(layers[0]);  height = len(layers)
print(f"Ширина мира: {width}  высота мира: {height}\n")

# Выводим устойчивость квадратов
for Y in range(height):
    print(f"{Y}  {'' if Y > 9 else ' '}" +
          ' '.join(f"{int(cell):2d}" if cell >= 0 else "  " for cell in LAND[Y]))

# Выводим цвета
for Y in range(height):
    print(f"{Y}  {'' if Y > 9 else ' '}" +
          ''.join(f"{cell}" if 1 == 1 else "  " for cell in COLO[Y]))

# ---------------------------------------------------------------------
# Разводим устройчивость по плоскости

def sosedi(Y, X):
    sose = []
    if Y > 0  and COLO[Y-1][X] == "🟩": sose.append([Y-1, X])
    if Y < 16 and COLO[Y+1][X] == "🟩": sose.append([Y+1, X])
    if X > 0  and COLO[Y][X-1] == "🟩": sose.append([Y, X-1])    
    if X < 16 and COLO[Y][X+1] == "🟩": sose.append([Y, X+1]) 
    return sose

print(); #print(podpor)
RecLvl = 0

def Recur(OrY, OrX):
    global RecLvl
    RecLvl += 1
    for s in sosedi(OrY, OrX):
        Y, X = s[0], s[1]
        COLO[Y][X] = "🟫"
        LA[Y][X] += LA[OrY][OrX] * 0.21
        Recur(Y, X)
   #for s in sosedi(OrY, OrX): 
   #    Y, X = s[0], s[1]
   #    Recur(Y, X)
    
    
for p in  podpor:
    OrY, OrX = p[0], p[1]
    print(sosedi(OrY, OrX))
    LA[OrY][OrX] = LAND[OrY][OrX]
    Recur(OrY, OrX)
    print(RecLvl); print()
    
    RecLvl = 0
    for Y in range(height):
        for X in range(width):
            if LA[Y][X] > 0 and LA[Y][X] < 99: LAND[Y][X] += LA[Y][X]
            if LA[Y][X] > 0: LA[Y][X] = 0
            if COLO[Y][X] == "🟫": COLO[Y][X] = "🟩"
    #break
        
# Выводим цвета
for Y in range(height):
    print(f"{Y}  {'' if Y > 9 else ' '}" +
          ''.join(f"{cell}" if 1 == 1 else "  " for cell in COLO[Y]))

# Выводим устойчивость квадратов
for Y in range(height):
    print(f"{Y}  {'' if Y > 9 else ' '}" +
          ' '.join(f"{int(cell):2d}" if cell >= 0 else "  " for cell in LAND[Y]))
print()
# Выводим устойчивость квадратов
for Y in range(height):
    print(f"{Y}  {'' if Y > 9 else ' '}" +
          ' '.join(f"{str(round(cell,3))[:5]:6}" if cell >= 0 else "      " for cell in LAND[Y]))    
    

